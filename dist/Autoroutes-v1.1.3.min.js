const Autoroutes={beforeNavigation:async()=>true,afterNavigation:async()=>true,routes:{},appPath:window.location.origin,baseFolder:"/",wildcards:[],route:"",viewsContainerId:"autoroutes-view",wildcardChar:":",tagName:"router-link",scriptsClass:"autoroutes-script",debug:true,draftData:null};const readOnlyProperties={addListeners:addListeners,mountView:mountView,navigate:navigate,getData:getData,setData:setData,start:start,name:"Autoroutes",version:"1.1.3"};for(const[property,value]of Object.entries(readOnlyProperties))Object.defineProperty(Autoroutes,property,{value:value,writable:false});export default Autoroutes;const MAIN_CONTAINER=document.getElementById(Autoroutes.viewsContainerId);const EVENT_NAME="routerEvent";const NAVIGATION_EVENT=new Event(EVENT_NAME,{bubbles:true,cancelable:true,composed:false});function start(config){if(config.baseFolder!==undefined)config.baseFolder.charAt(0)==="/"?config.baseFolder:"/"+config.baseFolder;Object.assign(Autoroutes,config);window.Autoroutes=Autoroutes;Autoroutes.addListeners();if(!Autoroutes.routes.default){if(Autoroutes.debug)console.error(`${Autoroutes.name}: No default route specified.`);return}if(typeof Autoroutes.routes.default!=="string"){if(Autoroutes.debug)console.error(`${Autoroutes.name}: Default route is not a valid string.`);return}Autoroutes.mountView(window.location.pathname)}function addListeners(){document.addEventListener("click",event=>{if(event.target&&event.target.nodeType&&event.target.matches(`${Autoroutes.tagName}, ${Autoroutes.tagName} *`)){const targetRouterLink=event.target.nodeName===Autoroutes.tagName.toUpperCase()?event.target:event.target.closest(Autoroutes.tagName);const path=targetRouterLink.getAttribute("to");navigate(path)}});document.addEventListener(EVENT_NAME,async event=>{Autoroutes.mountView(event.path)});window.addEventListener("popstate",event=>Autoroutes.mountView(window.location.pathname))}async function mountView(route){if(await Autoroutes.beforeNavigation()===false)return;if(!validatePath(route))return;const fixedRoute=route==="/"||route===""?"default":route;Autoroutes.route="";Autoroutes.wildcards=[];let path=getFilePath(fixedRoute.split("/"));Autoroutes.route=Autoroutes.route.replace("/","");if(!path){if(Autoroutes.debug)console.error(`${Autoroutes.name}: The error above was triggered because of path.`,route);return}const fixedPath=Autoroutes.baseFolder+path;if(path.match(/\.html/)){await loadHTMLView(fixedPath)}else if(path.match(/\.js/)){await loadJSView(fixedPath)}else{if(Autoroutes.debug)console.error(`${Autoroutes.name}: File type not supported... yet.`);return}await Autoroutes.afterNavigation()}function navigate(route,data){const fixedPath=route.charAt(0)==="/"?route:"/"+route;NAVIGATION_EVENT.path=fixedPath;const fixedData=data!==undefined&&data!==null?data:Autoroutes.draftData;history.pushState(fixedData,"",fixedPath);setData(null);document.dispatchEvent(NAVIGATION_EVENT)}function setData(data={}){Autoroutes.draftData=data}function getData(){return history.state}function validatePath(route){const pathRegExp=new RegExp(`^(\/?${Autoroutes.wildcardChar}?[.a-zA-Z0-9-]*\/?)+$`);const isValidPath=pathRegExp.test(route);if(!isValidPath&&Autoroutes.debug)console.error(`${Autoroutes.name}: Specified route is not valid, it might contain invalid characters. Relative paths prefixes other than / aren't allowed (yet).`);return isValidPath}function getFilePath(routeArray,currentPathValue=Autoroutes.routes){const route=routeArray[0];if(typeof currentPathValue==="string"&&routeArray.length===1&&routeArray[0].length===0)return currentPathValue;if(route.length===0)return getFilePath(routeArray.slice(1),currentPathValue);let newPathValue=currentPathValue[route];if(newPathValue===null||Array.isArray(newPathValue)||typeof newPathValue!=="object"&&typeof newPathValue!=="string"&&newPathValue!==undefined){if(Autoroutes.debug)console.error(`${Autoroutes.name}: Route mismatch, routes must be either a file path (string) or an object containing file paths/nested file paths. \nReceived the following value:`,currentPathValue);return}let wildcardRoute="";if(newPathValue===undefined&&typeof currentPathValue==="object"){wildcardRoute=Object.keys(currentPathValue).find(key=>key.charAt(0)===Autoroutes.wildcardChar);if(wildcardRoute){newPathValue=currentPathValue[wildcardRoute];Autoroutes.wildcards.push({name:wildcardRoute,value:route})}else if(Autoroutes.routes.fallback)newPathValue=Autoroutes.routes.fallback;else if(Autoroutes.routes.default)newPathValue=Autoroutes.routes.default;else{if(Autoroutes.debug)console.error(`${Autoroutes.name}: No fallback found for 404 routes.`);return}}Autoroutes.route+=`/${wildcardRoute||route}`;if(routeArray.length===1)return newPathValue;else return getFilePath(routeArray.slice(1),newPathValue)}async function loadJSView(viewRelativeUrl){await import(viewRelativeUrl).then(async view=>{const html=await view.default;if(typeof html==="string"){MAIN_CONTAINER.innerHTML=html;return}MAIN_CONTAINER.innerHTML="";if(Array.isArray(html)){MAIN_CONTAINER.append(...html)}else if(html instanceof Node||html instanceof Element||html instanceof Document||html instanceof DocumentFragment){MAIN_CONTAINER.append(html)}})}async function loadHTMLView(viewRelativeUrl){const htmlUrl=new URL(viewRelativeUrl,Autoroutes.appPath).href;const response=await fetch(htmlUrl);const viewHtml=await response.text();const range=document.createRange();range.selectNode(MAIN_CONTAINER);const documentFragment=range.createContextualFragment(viewHtml);MAIN_CONTAINER.innerHTML="";MAIN_CONTAINER.appendChild(documentFragment)}